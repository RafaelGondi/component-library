ac1cfa94a0fbf6a50d7a9bd0d033bd6f
"use strict";

var _interopRequireDefault = require("/home/sysvale/component-library/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _testUtils = require("@vue/test-utils");

var _bootstrapVue = _interopRequireDefault(require("bootstrap-vue"));

var _Badge = _interopRequireDefault(require("../../src/components/Badge.vue"));

const localVue = (0, _testUtils.createLocalVue)();
localVue.use(_bootstrapVue.default);
test('Component is mounted properly', () => {
  const wrapper = (0, _testUtils.mount)(_Badge.default, {
    localVue,
    propsData: {
      content: 'Test'
    }
  });
  expect(wrapper).toMatchSnapshot();
});
describe("Computed property 'predefinedStyle' test", () => {
  test('if the computed property predefinedStyle works properly with the default value for the prop variant', () => {
    const wrapper = (0, _testUtils.mount)(_Badge.default, {
      localVue,
      propsData: {
        content: 'Test'
      }
    });
    expect(wrapper.vm.predefinedStyle).toBe('yellow');
  });
});
describe("Prop 'variant' tests", () => {
  test("if the computed property changes when the prop variant is setted to 'yellow'", () => {
    const wrapper = (0, _testUtils.mount)(_Badge.default, {
      localVue,
      propsData: {
        variant: 'yellow',
        content: 'Test'
      }
    });
    expect(wrapper.vm.predefinedStyle).toBe('yellow');
  });
  test("if the computed property changes when the prop variant is setted to 'green'", () => {
    const wrapper = (0, _testUtils.mount)(_Badge.default, {
      localVue,
      propsData: {
        variant: 'green',
        content: 'Test'
      }
    });
    expect(wrapper.vm.predefinedStyle).toBe('green');
  });
  test("if the computed property changes when the prop variant is setted to 'red'", () => {
    const wrapper = (0, _testUtils.mount)(_Badge.default, {
      localVue,
      propsData: {
        variant: 'red',
        content: 'Test'
      }
    });
    expect(wrapper.vm.predefinedStyle).toBe('red');
  });
  test("if the computed property changes when the prop variant is setted to 'blue'", () => {
    const wrapper = (0, _testUtils.mount)(_Badge.default, {
      localVue,
      propsData: {
        variant: 'blue',
        content: 'Test'
      }
    });
    expect(wrapper.vm.predefinedStyle).toBe('blue');
  });
  test("if the computed property changes when the prop variant is setted to 'purple'", () => {
    const wrapper = (0, _testUtils.mount)(_Badge.default, {
      localVue,
      propsData: {
        variant: 'purple',
        content: 'Test'
      }
    });
    expect(wrapper.vm.predefinedStyle).toBe('purple');
  });
  test("if the computed property changes when the prop variant is setted to 'gray'", () => {
    const wrapper = (0, _testUtils.mount)(_Badge.default, {
      localVue,
      propsData: {
        variant: 'gray',
        content: 'Test'
      }
    });
    expect(wrapper.vm.predefinedStyle).toBe('gray');
  });
});
describe("Prop 'bgColor' and 'color' tests", () => {
  test("if the computed property 'styleVariables' changes when the prop 'colorCodeMode' is setted to 'true'", () => {
    const wrapper = (0, _testUtils.mount)(_Badge.default, {
      localVue,
      propsData: {
        colorCodeMode: true,
        color: 'white',
        bgColor: 'blue',
        content: 'Test'
      }
    });
    expect(wrapper.vm.styleVariables).toStrictEqual({
      "--bg-color": "blue",
      "--color": "white"
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,