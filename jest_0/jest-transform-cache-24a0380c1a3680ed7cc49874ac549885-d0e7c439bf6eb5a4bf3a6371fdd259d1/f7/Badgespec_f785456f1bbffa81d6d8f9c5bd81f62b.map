{"version":3,"sources":["Badge.spec.js"],"names":["localVue","use","BootstrapVue","test","wrapper","Badge","propsData","content","expect","toMatchSnapshot","describe","vm","predefinedStyle","toBe","variant","colorCodeMode","color","bgColor","styleVariables","toStrictEqual"],"mappings":"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","sourcesContent":["import { mount, createLocalVue } from '@vue/test-utils';\nimport BootstrapVue from 'bootstrap-vue';\nimport Badge from '../../src/components/Badge.vue';\n\nconst localVue = createLocalVue();\nlocalVue.use(BootstrapVue);\n\ntest('Component is mounted properly', () => {\n\tconst wrapper = mount(Badge, {\n\t\tlocalVue,\n\t\tpropsData: {\n\t\t\tcontent: 'Test',\n\t\t},\n\t});\n\texpect(wrapper).toMatchSnapshot();\n});\n\ndescribe(\"Computed property 'predefinedStyle' test\", () => {\n\ttest('if the computed property predefinedStyle works properly with the default value for the prop variant', () => {\n\t\tconst wrapper = mount(Badge, {\n\t\t\tlocalVue,\n\t\t\tpropsData: {\n\t\t\t\tcontent: 'Test',\n\t\t\t},\n\t\t});\n\t\texpect(wrapper.vm.predefinedStyle).toBe('yellow');\n\t});\n});\n\ndescribe(\"Prop 'variant' tests\", () => {\n\ttest(\"if the computed property changes when the prop variant is setted to 'yellow'\", () => {\n\t\tconst wrapper = mount(Badge, {\n\t\t\tlocalVue,\n\t\t\tpropsData: {\n\t\t\t\tvariant: 'yellow',\n\t\t\t\tcontent: 'Test',\n\t\t\t},\n\t\t});\n\n\t\texpect(wrapper.vm.predefinedStyle).toBe('yellow');\n\t});\n\n\ttest(\"if the computed property changes when the prop variant is setted to 'green'\", () => {\n\t\tconst wrapper = mount(Badge, {\n\t\t\tlocalVue,\n\t\t\tpropsData: {\n\t\t\t\tvariant: 'green',\n\t\t\t\tcontent: 'Test',\n\t\t\t},\n\t\t});\n\n\t\texpect(wrapper.vm.predefinedStyle).toBe('green');\n\t});\n\n\ttest(\"if the computed property changes when the prop variant is setted to 'red'\", () => {\n\t\tconst wrapper = mount(Badge, {\n\t\t\tlocalVue,\n\t\t\tpropsData: {\n\t\t\t\tvariant: 'red',\n\t\t\t\tcontent: 'Test',\n\t\t\t},\n\t\t});\n\n\t\texpect(wrapper.vm.predefinedStyle).toBe('red');\n\t});\n\n\ttest(\"if the computed property changes when the prop variant is setted to 'blue'\", () => {\n\t\tconst wrapper = mount(Badge, {\n\t\t\tlocalVue,\n\t\t\tpropsData: {\n\t\t\t\tvariant: 'blue',\n\t\t\t\tcontent: 'Test',\n\t\t\t},\n\t\t});\n\n\t\texpect(wrapper.vm.predefinedStyle).toBe('blue');\n\t});\n\n\ttest(\"if the computed property changes when the prop variant is setted to 'purple'\", () => {\n\t\tconst wrapper = mount(Badge, {\n\t\t\tlocalVue,\n\t\t\tpropsData: {\n\t\t\t\tvariant: 'purple',\n\t\t\t\tcontent: 'Test',\n\t\t\t},\n\t\t});\n\n\t\texpect(wrapper.vm.predefinedStyle).toBe('purple');\n\t});\n\n\ttest(\"if the computed property changes when the prop variant is setted to 'gray'\", () => {\n\t\tconst wrapper = mount(Badge, {\n\t\t\tlocalVue,\n\t\t\tpropsData: {\n\t\t\t\tvariant: 'gray',\n\t\t\t\tcontent: 'Test',\n\t\t\t},\n\t\t});\n\n\t\texpect(wrapper.vm.predefinedStyle).toBe('gray');\n\t});\n});\n\ndescribe(\"Prop 'bgColor' and 'color' tests\", () => {\n\ttest(\"if the computed property 'styleVariables' changes when the prop 'colorCodeMode' is setted to 'true'\", () => {\n\t\tconst wrapper = mount(Badge, {\n\t\t\tlocalVue,\n\t\t\tpropsData: {\n\t\t\t\tcolorCodeMode: true,\n\t\t\t\tcolor: 'white',\n\t\t\t\tbgColor: 'blue',\n\t\t\t\tcontent: 'Test',\n\t\t\t},\n\t\t});\n\n\t\texpect(wrapper.vm.styleVariables).toStrictEqual({\"--bg-color\": \"blue\", \"--color\": \"white\"});\n\t});\n});\n"]}