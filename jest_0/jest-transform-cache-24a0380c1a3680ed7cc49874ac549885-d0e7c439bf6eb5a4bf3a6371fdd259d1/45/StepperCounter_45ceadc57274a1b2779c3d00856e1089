80f67744b4d671bae93300a284cb8f3e
;(function(){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _vueFeatherIcons = require("vue-feather-icons");

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var _default = {
  props: {
    steps: {
      type: Array,
      default: () => [],
      required: true,
      description: `A object with the properties 'label', and 'concluded'.
                The 'label' property is the text that will be displayed under
                the counter, and 'concluded' is the status (boolean) of the step.`
    }
  },
  components: {
    CheckIcon: _vueFeatherIcons.CheckIcon
  },
  methods: {
    circleStyle(step) {
      let style = '';

      if (step.concluded) {
        style += 'concluded-step';
      }

      if (step.active) {
        style += 'active-step';
      }

      if (!step.active && !step.concluded) {
        style += ' not-active-step';
      }

      return style;
    },

    changeStep(index) {
      this.steps[index].active = true;
      this.steps.forEach((item, i) => {
        item.active = i === index ? true : false;
      });
      this.$emit('step_changed', index, this.steps[index]);
    }

  }
};
exports.default = _default;
})()
var defaultExport = (module.exports.__esModule) ? module.exports.default : module.exports;var __vue__options__ = (typeof defaultExport === "function"? defaultExport.options: defaultExport)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"d-flex justify-content-between"},_vm._l((_vm.steps),function(step,index){return _c('div',{key:index,class:index !== _vm.steps.length - 1 ? 'w-100' : ''},[_c('div',{staticClass:"d-flex align-items-center",attrs:{"id":("step-" + (index + 1))},on:{"click":function($event){return _vm.changeStep(index)}}},[_c('div',{staticClass:"d-flex justify-content-center align-items-center cursor-pointer",class:_vm.circleStyle(step)},[(!step.concluded)?_c('span',{staticClass:"not-concluded-step-text-color fs-14"},[_vm._v("\n                    "+_vm._s(index + 1)+"\n                ")]):_c('check-icon',{staticClass:"concluded-step",attrs:{"size":"1x"}})],1),_vm._v(" "),(
                    index !== _vm.steps.length - 1 &&
                    _vm.steps[index].concluded &&
                    _vm.steps[index + 1].concluded
                )?_c('div',{staticClass:"concluded-stepper-divider"}):(
                    (index !== _vm.steps.length - 1 &&
                    index > 0 &&
                    _vm.steps[index].concluded &&
                    _vm.steps[index - 1].concluded) ||
                    (index !== _vm.steps.length - 1 &&
                    index === 0 &&
                    _vm.steps[index].concluded)
                )?_c('div',{staticClass:"in-progress-stepper-divider"}):(index !== _vm.steps.length - 1)?_c('div',{staticClass:"common-stepper-divider"}):_vm._e()]),_vm._v(" "),_c('div',{staticClass:"label-container mt-2",class:!step.active ? 'not-active-step-label' : ''},[_c('small',[_vm._v(_vm._s(step.label))])])])}),0)}
__vue__options__.staticRenderFns = []

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN0ZXBwZXJDb3VudGVyLnZ1ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQWtFQTs7QUFsRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFKQTtBQURBO0FBV0E7QUFDQTtBQURBO0FBSUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7O0FBMUJBO0FBaEJBIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW5cIj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgdi1mb3I9XCIoc3RlcCwgaW5kZXgpIGluIHN0ZXBzXCJcbiAgICAgICAgICAgIDprZXk9XCJpbmRleFwiXG4gICAgICAgICAgICA6Y2xhc3M9XCJpbmRleCAhPT0gc3RlcHMubGVuZ3RoIC0gMSA/ICd3LTEwMCcgOiAnJ1wiXG4gICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIlxuICAgICAgICAgICAgICAgIDppZD1cImBzdGVwLSR7aW5kZXggKyAxfWBcIlxuICAgICAgICAgICAgICAgIEBjbGljaz1cImNoYW5nZVN0ZXAoaW5kZXgpXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIGN1cnNvci1wb2ludGVyXCJcbiAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwiY2lyY2xlU3R5bGUoc3RlcClcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9XCIhc3RlcC5jb25jbHVkZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJub3QtY29uY2x1ZGVkLXN0ZXAtdGV4dC1jb2xvciBmcy0xNFwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7IGluZGV4ICsgMSB9fVxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxjaGVjay1pY29uXG4gICAgICAgICAgICAgICAgICAgICAgICB2LWVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCIxeFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImNvbmNsdWRlZC1zdGVwXCJcbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgXG4gICAgICAgICAgICAgICAgICAgIHYtaWY9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ICE9PSBzdGVwcy5sZW5ndGggLSAxICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwc1tpbmRleF0uY29uY2x1ZGVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwc1tpbmRleCArIDFdLmNvbmNsdWRlZFxuICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImNvbmNsdWRlZC1zdGVwcGVyLWRpdmlkZXJcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGRpdiBcbiAgICAgICAgICAgICAgICAgICAgdi1lbHNlLWlmPVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAoaW5kZXggIT09IHN0ZXBzLmxlbmd0aCAtIDEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHNbaW5kZXhdLmNvbmNsdWRlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHNbaW5kZXggLSAxXS5jb25jbHVkZWQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoaW5kZXggIT09IHN0ZXBzLmxlbmd0aCAtIDEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwc1tpbmRleF0uY29uY2x1ZGVkKVxuICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImluLXByb2dyZXNzLXN0ZXBwZXItZGl2aWRlclwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8ZGl2IFxuICAgICAgICAgICAgICAgICAgICB2LWVsc2UtaWY9XCJpbmRleCAhPT0gc3RlcHMubGVuZ3RoIC0gMVwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiY29tbW9uLXN0ZXBwZXItZGl2aWRlclwiXG4gICAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3M9XCJsYWJlbC1jb250YWluZXIgbXQtMlwiXG4gICAgICAgICAgICAgICAgOmNsYXNzPVwiIXN0ZXAuYWN0aXZlID8gJ25vdC1hY3RpdmUtc3RlcC1sYWJlbCcgOiAnJ1wiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHNtYWxsPnt7IHN0ZXAubGFiZWwgfX08L3NtYWxsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5cbmltcG9ydCB7IENoZWNrSWNvbiB9IGZyb20gJ3Z1ZS1mZWF0aGVyLWljb25zJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcHJvcHM6IHtcbiAgICAgICAgc3RlcHM6IHtcbiAgICAgICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gW10sXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgQSBvYmplY3Qgd2l0aCB0aGUgcHJvcGVydGllcyAnbGFiZWwnLCBhbmQgJ2NvbmNsdWRlZCcuXG4gICAgICAgICAgICAgICAgVGhlICdsYWJlbCcgcHJvcGVydHkgaXMgdGhlIHRleHQgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCB1bmRlclxuICAgICAgICAgICAgICAgIHRoZSBjb3VudGVyLCBhbmQgJ2NvbmNsdWRlZCcgaXMgdGhlIHN0YXR1cyAoYm9vbGVhbikgb2YgdGhlIHN0ZXAuYCxcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIENoZWNrSWNvbixcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICBjaXJjbGVTdHlsZShzdGVwKSB7XG4gICAgICAgICAgICBsZXQgc3R5bGUgPSAnJztcblxuICAgICAgICAgICAgaWYgKHN0ZXAuY29uY2x1ZGVkKSB7XG4gICAgICAgICAgICAgICAgc3R5bGUgKz0gJ2NvbmNsdWRlZC1zdGVwJztcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChzdGVwLmFjdGl2ZSl7XG4gICAgICAgICAgICAgICAgc3R5bGUgKz0gJ2FjdGl2ZS1zdGVwJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzdGVwLmFjdGl2ZSAmJiAhc3RlcC5jb25jbHVkZWQpIHtcbiAgICAgICAgICAgICAgICBzdHlsZSArPSAnIG5vdC1hY3RpdmUtc3RlcCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgICAgfSxcblxuICAgICAgICBjaGFuZ2VTdGVwKGluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLnN0ZXBzW2luZGV4XS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zdGVwcy5mb3JFYWNoKChpdGVtLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS5hY3RpdmUgPSBpID09PSBpbmRleCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdzdGVwX2NoYW5nZWQnLCBpbmRleCwgdGhpcy5zdGVwc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgfVxufVxuPC9zY3JpcHQ+XG48c3R5bGU+XG4gICAgLmFjdGl2ZS1zdGVwLCAubm90LWFjdGl2ZS1zdGVwLCAuY29uY2x1ZGVkLXN0ZXAge1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MHB4O1xuICAgICAgICBtaW4td2lkdGg6IDMwcHg7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDMwcHg7XG4gICAgICAgIGJvcmRlcjogMS41cHg7XG4gICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgfVxuXG4gICAgLmFjdGl2ZS1zdGVwIHtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAjMDBDQkFEO1xuICAgIH1cblxuICAgIC5jb25jbHVkZWQtc3RlcCB7IFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBDQkFEO1xuICAgICAgICBib3JkZXItY29sb3I6ICMwMENCQUQ7XG4gICAgICAgIHdpZHRoOiAzMHB4O1xuICAgICAgICBoZWlnaHQ6IDMwcHg7XG4gICAgfVxuXG4gICAgLm5vdC1hY3RpdmUtc3RlcCB7XG4gICAgICAgIGNvbG9yOiAjQkZDMkM1O1xuICAgICAgICBib3JkZXItY29sb3I6ICNCRkMyQzU7XG4gICAgfVxuXG4gICAgLm5vdC1jb25jbHVkZWQtc3RlcC10ZXh0LWNvbG9yIHtcbiAgICAgICAgY29sb3I6ICMwMENCQUQ7XG4gICAgfVxuXG4gICAgLmNvbW1vbi1zdGVwcGVyLWRpdmlkZXIsIC5pbi1wcm9ncmVzcy1zdGVwcGVyLWRpdmlkZXIsIC5jb25jbHVkZWQtc3RlcHBlci1kaXZpZGVyIHtcbiAgICAgICAgaGVpZ2h0OiAzcHg7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIC5jb21tb24tc3RlcHBlci1kaXZpZGVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0JGQzJDNTtcbiAgICB9XG5cbiAgICAuaW4tcHJvZ3Jlc3Mtc3RlcHBlci1kaXZpZGVyIHtcbiAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkwZGVnLCAjNDNFNENDIDAlLCAjQkZDMkM1IDY3LjU3JSk7XG4gICAgfVxuXG4gICAgLmNvbmNsdWRlZC1zdGVwcGVyLWRpdmlkZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjMDBDQkFEO1xuICAgIH1cblxuICAgIC5jb25jbHVkZWQtc3RlcCB7XG4gICAgICAgIGNvbG9yOiAjZmZmO1xuICAgIH1cblxuICAgIC5sYWJlbC1jb250YWluZXIge1xuICAgICAgICBtYXgtd2lkdGg6IDcwcHg7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAtMTBweDtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDEuMDtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuXG4gICAgLmZzLTE0IHtcbiAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgIH1cblxuICAgIC5jdXJzb3ItcG9pbnRlciB7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB9XG5cbiAgICAubm90LWFjdGl2ZS1zdGVwLWxhYmVsIHtcbiAgICAgICAgY29sb3I6ICM1ZDYzNjk7XG4gICAgfVxuPC9zdHlsZT4iXX0=