fc589ea4f7380778ebd993b841300415
"use strict";

var _interopRequireDefault = require("/home/sysvale/component-library/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _testUtils = require("@vue/test-utils");

var _bootstrapVue = _interopRequireDefault(require("bootstrap-vue"));

var _StepperCounter = _interopRequireDefault(require("../../src/components/StepperCounter.vue"));

const localVue = (0, _testUtils.createLocalVue)();
localVue.use(_bootstrapVue.default);
test('Component is mounted properly', () => {
  let mocked_data = [{
    label: 'Dummy label 1',
    concluded: true,
    active: false
  }, {
    label: 'Dummy label 3',
    concluded: false,
    active: true
  }, {
    label: 'Dummy label 2',
    concluded: false,
    active: false
  }];
  const wrapper = (0, _testUtils.mount)(_StepperCounter.default, {
    localVue,
    propsData: {
      steps: mocked_data
    }
  });
  expect(wrapper).toMatchSnapshot();
});
describe("Divider styles test", () => {
  test('if all the stepper dividers are rendered as common dividers', () => {
    let mocked_data = [{
      label: 'Dummy label 1',
      concluded: false,
      active: true
    }, {
      label: 'Dummy label 2',
      concluded: false,
      active: false
    }, {
      label: 'Dummy label 3',
      concluded: false,
      active: false
    }];
    const wrapper = (0, _testUtils.mount)(_StepperCounter.default, {
      localVue,
      propsData: {
        steps: mocked_data
      }
    });
    expect(wrapper.findAll('.common-stepper-divider').length).toBe(2);
  });
  test('if one of the stepper divider is rendered as an in_progress divider and others are rendered as common dividers', () => {
    let mocked_data = [{
      label: 'Dummy label 1',
      concluded: true,
      active: false
    }, {
      label: 'Dummy label 2',
      concluded: false,
      active: true
    }, {
      label: 'Dummy label 3',
      concluded: false,
      active: false
    }];
    const wrapper = (0, _testUtils.mount)(_StepperCounter.default, {
      localVue,
      propsData: {
        steps: mocked_data
      }
    });
    expect(wrapper.findAll('.in-progress-stepper-divider').length).toBe(1);
    expect(wrapper.findAll('.common-stepper-divider').length).toBe(1);
  });
  test('if one of the stepper divider is rendered as a concluded divider and the other is rendered as an in_progress divider', () => {
    let mocked_data = [{
      label: 'Dummy label 1',
      concluded: true,
      active: false
    }, {
      label: 'Dummy label 2',
      concluded: true,
      active: false
    }, {
      label: 'Dummy label 3',
      concluded: false,
      active: true
    }];
    const wrapper = (0, _testUtils.mount)(_StepperCounter.default, {
      localVue,
      propsData: {
        steps: mocked_data
      }
    });
    expect(wrapper.findAll('.concluded-stepper-divider').length).toBe(1);
    expect(wrapper.findAll('.in-progress-stepper-divider').length).toBe(1);
  });
});
describe("Change step event tests", () => {
  test('if a event is emited when the stepper is clicked', () => {
    let mocked_data = [{
      label: 'Dummy label 1',
      concluded: false,
      active: true
    }, {
      label: 'Dummy label 2',
      concluded: false,
      active: false
    }, {
      label: 'Dummy label 3',
      concluded: false,
      active: false
    }];
    const wrapper = (0, _testUtils.mount)(_StepperCounter.default, {
      localVue,
      propsData: {
        steps: mocked_data
      }
    });
    wrapper.find('#step-2').trigger('click');
    expect(wrapper.emitted().step_changed).toBeTruthy();
    expect(wrapper.emitted().step_changed).toEqual([[1, {
      "active": true,
      "concluded": false,
      "label": "Dummy label 2"
    }]]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,