{"version":3,"sources":["StepperCounter.spec.js"],"names":["localVue","use","BootstrapVue","test","mocked_data","label","concluded","active","wrapper","StepperCounter","propsData","steps","expect","toMatchSnapshot","describe","findAll","length","toBe","find","trigger","emitted","step_changed","toBeTruthy","toEqual"],"mappings":"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","sourcesContent":["import { mount, createLocalVue } from '@vue/test-utils';\nimport BootstrapVue from 'bootstrap-vue';\nimport StepperCounter from '../../src/components/StepperCounter.vue';\n\nconst localVue = createLocalVue();\nlocalVue.use(BootstrapVue);\n\ntest('Component is mounted properly', () => {\n\tlet mocked_data = [\n\t\t{ label: 'Dummy label 1', concluded: true, active: false },\n\t\t{ label: 'Dummy label 3', concluded: false, active: true },\n\t\t{ label: 'Dummy label 2', concluded: false, active: false },\n\t];\n\n\tconst wrapper = mount(StepperCounter, {\n\t\tlocalVue,\n\t\tpropsData: {\n\t\t\tsteps: mocked_data,\n\t\t},\n\t});\n\texpect(wrapper).toMatchSnapshot();\n});\n\ndescribe(\"Divider styles test\", () => {\n\ttest('if all the stepper dividers are rendered as common dividers', () => {\n\t\tlet mocked_data = [\n\t\t\t{ label: 'Dummy label 1', concluded: false, active: true },\n\t\t\t{ label: 'Dummy label 2', concluded: false, active: false },\n\t\t\t{ label: 'Dummy label 3', concluded: false, active: false },\n\t\t];\n\n\t\tconst wrapper = mount(StepperCounter, {\n\t\t\tlocalVue,\n\t\t\tpropsData: {\n\t\t\t\tsteps: mocked_data,\n\t\t\t},\n\t\t});\n\t\texpect(wrapper.findAll('.common-stepper-divider').length).toBe(2);\n\t});\n\n\ttest('if one of the stepper divider is rendered as an in_progress divider and others are rendered as common dividers', () => {\n\t\tlet mocked_data = [\n\t\t\t{ label: 'Dummy label 1', concluded: true, active: false },\n\t\t\t{ label: 'Dummy label 2', concluded: false, active: true },\n\t\t\t{ label: 'Dummy label 3', concluded: false, active: false },\n\t\t];\n\n\t\tconst wrapper = mount(StepperCounter, {\n\t\t\tlocalVue,\n\t\t\tpropsData: {\n\t\t\t\tsteps: mocked_data,\n\t\t\t},\n\t\t});\n\t\texpect(wrapper.findAll('.in-progress-stepper-divider').length).toBe(1);\n\t\texpect(wrapper.findAll('.common-stepper-divider').length).toBe(1);\n\t});\n\n\ttest('if one of the stepper divider is rendered as a concluded divider and the other is rendered as an in_progress divider', () => {\n\t\tlet mocked_data = [\n\t\t\t{ label: 'Dummy label 1', concluded: true, active: false },\n\t\t\t{ label: 'Dummy label 2', concluded: true, active: false },\n\t\t\t{ label: 'Dummy label 3', concluded: false, active: true },\n\t\t];\n\n\t\tconst wrapper = mount(StepperCounter, {\n\t\t\tlocalVue,\n\t\t\tpropsData: {\n\t\t\t\tsteps: mocked_data,\n\t\t\t},\n\t\t});\n\t\texpect(wrapper.findAll('.concluded-stepper-divider').length).toBe(1);\n\t\texpect(wrapper.findAll('.in-progress-stepper-divider').length).toBe(1);\n\t});\n});\n\ndescribe(\"Change step event tests\", () => {\n\ttest('if a event is emited when the stepper is clicked', () => {\n\t\tlet mocked_data = [\n\t\t\t{ label: 'Dummy label 1', concluded: false, active: true },\n\t\t\t{ label: 'Dummy label 2', concluded: false, active: false },\n\t\t\t{ label: 'Dummy label 3', concluded: false, active: false },\n\t\t];\n\n\t\tconst wrapper = mount(StepperCounter, {\n\t\t\tlocalVue,\n\t\t\tpropsData: {\n\t\t\t\tsteps: mocked_data,\n\t\t\t},\n\t\t});\n\n\t\twrapper.find('#step-2').trigger('click');\n\n\t\texpect(wrapper.emitted().step_changed).toBeTruthy();\n\t\texpect(wrapper.emitted().step_changed).toEqual([\n\t\t\t[\n\t\t\t\t1,\n\t\t\t\t{\"active\": true, \"concluded\": false, \"label\": \"Dummy label 2\"},\n\t\t\t]\n\t\t]);\n\t});\n});\n"]}