bfdbce51adb4a7e45150c50d8174c958
"use strict";

var _interopRequireDefault = require("/home/sysvale/component-library/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _testUtils = require("@vue/test-utils");

var _bootstrapVue = _interopRequireDefault(require("bootstrap-vue"));

var _ActionBar = _interopRequireDefault(require("../../src/components/ActionBar.vue"));

const localVue = (0, _testUtils.createLocalVue)();
localVue.use(_bootstrapVue.default);
test('Component is mounted properly', () => {
  const wrapper = (0, _testUtils.mount)(_ActionBar.default, {
    localVue
  });
  expect(wrapper).toMatchSnapshot();
});
test('if the dismiss icon is shown when the prop isDismissible is setted to true', () => {
  const wrapper = (0, _testUtils.mount)(_ActionBar.default, {
    localVue,
    propsData: {
      isDismissible: true
    }
  });
  expect(wrapper.findAll('.icon-container').length).toBe(1);
});
test("if the 'fixed' class is used when the floatingMode is setted to true", () => {
  const wrapper = (0, _testUtils.mount)(_ActionBar.default, {
    localVue,
    propsData: {
      floatingMode: true
    }
  });
  expect(wrapper.findAll('.fixed').length).toBe(1);
});
test('if the event is emited correctly when the dismissible icon is clicked', () => {
  const wrapper = (0, _testUtils.mount)(_ActionBar.default, {
    localVue,
    propsData: {
      isDismissible: true
    }
  });
  wrapper.find('.icon-container').trigger('click');
  expect(wrapper.emitted().close).toBeTruthy();
  expect(wrapper.emitted().close).toEqual([[true]]);
});
test("if the the color sent to the prop 'bgData' is applied", () => {
  const wrapper = (0, _testUtils.mount)(_ActionBar.default, {
    localVue,
    propsData: {
      bgColor: 'rgb(0, 0, 0)'
    }
  });
  expect(wrapper.find('.toolbar').element.style['background-color']).toEqual('rgb(0, 0, 0)');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFjdGlvbkJhci5zcGVjLmpzIl0sIm5hbWVzIjpbImxvY2FsVnVlIiwidXNlIiwiQm9vdHN0cmFwVnVlIiwidGVzdCIsIndyYXBwZXIiLCJBY3Rpb25CYXIiLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJwcm9wc0RhdGEiLCJpc0Rpc21pc3NpYmxlIiwiZmluZEFsbCIsImxlbmd0aCIsInRvQmUiLCJmbG9hdGluZ01vZGUiLCJmaW5kIiwidHJpZ2dlciIsImVtaXR0ZWQiLCJjbG9zZSIsInRvQmVUcnV0aHkiLCJ0b0VxdWFsIiwiYmdDb2xvciIsImVsZW1lbnQiLCJzdHlsZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLFFBQVEsR0FBRyxnQ0FBakI7QUFDQUEsUUFBUSxDQUFDQyxHQUFULENBQWFDLHFCQUFiO0FBRUFDLElBQUksQ0FBQywrQkFBRCxFQUFrQyxNQUFNO0FBQzNDLFFBQU1DLE9BQU8sR0FBRyxzQkFBTUMsa0JBQU4sRUFBaUI7QUFDaENMLElBQUFBO0FBRGdDLEdBQWpCLENBQWhCO0FBR0FNLEVBQUFBLE1BQU0sQ0FBQ0YsT0FBRCxDQUFOLENBQWdCRyxlQUFoQjtBQUNBLENBTEcsQ0FBSjtBQU9BSixJQUFJLENBQUMsNEVBQUQsRUFBK0UsTUFBTTtBQUN4RixRQUFNQyxPQUFPLEdBQUcsc0JBQU1DLGtCQUFOLEVBQWlCO0FBQ2hDTCxJQUFBQSxRQURnQztBQUVoQ1EsSUFBQUEsU0FBUyxFQUFFO0FBQ1ZDLE1BQUFBLGFBQWEsRUFBRTtBQURMO0FBRnFCLEdBQWpCLENBQWhCO0FBT0FILEVBQUFBLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDTSxPQUFSLENBQWdCLGlCQUFoQixFQUFtQ0MsTUFBcEMsQ0FBTixDQUFrREMsSUFBbEQsQ0FBdUQsQ0FBdkQ7QUFDQSxDQVRHLENBQUo7QUFXQVQsSUFBSSxDQUFDLHNFQUFELEVBQXlFLE1BQU07QUFDbEYsUUFBTUMsT0FBTyxHQUFHLHNCQUFNQyxrQkFBTixFQUFpQjtBQUNoQ0wsSUFBQUEsUUFEZ0M7QUFFaENRLElBQUFBLFNBQVMsRUFBRTtBQUNWSyxNQUFBQSxZQUFZLEVBQUU7QUFESjtBQUZxQixHQUFqQixDQUFoQjtBQU9BUCxFQUFBQSxNQUFNLENBQUNGLE9BQU8sQ0FBQ00sT0FBUixDQUFnQixRQUFoQixFQUEwQkMsTUFBM0IsQ0FBTixDQUF5Q0MsSUFBekMsQ0FBOEMsQ0FBOUM7QUFDQSxDQVRHLENBQUo7QUFXQVQsSUFBSSxDQUFDLHVFQUFELEVBQTBFLE1BQU07QUFDbkYsUUFBTUMsT0FBTyxHQUFHLHNCQUFNQyxrQkFBTixFQUFpQjtBQUNoQ0wsSUFBQUEsUUFEZ0M7QUFFaENRLElBQUFBLFNBQVMsRUFBRTtBQUNWQyxNQUFBQSxhQUFhLEVBQUU7QUFETDtBQUZxQixHQUFqQixDQUFoQjtBQU9BTCxFQUFBQSxPQUFPLENBQUNVLElBQVIsQ0FBYSxpQkFBYixFQUFnQ0MsT0FBaEMsQ0FBd0MsT0FBeEM7QUFFQVQsRUFBQUEsTUFBTSxDQUFDRixPQUFPLENBQUNZLE9BQVIsR0FBa0JDLEtBQW5CLENBQU4sQ0FBZ0NDLFVBQWhDO0FBQ0FaLEVBQUFBLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDWSxPQUFSLEdBQWtCQyxLQUFuQixDQUFOLENBQWdDRSxPQUFoQyxDQUF3QyxDQUFFLENBQUUsSUFBRixDQUFGLENBQXhDO0FBQ0EsQ0FaRyxDQUFKO0FBY0FoQixJQUFJLENBQUMsdURBQUQsRUFBMEQsTUFBTTtBQUNuRSxRQUFNQyxPQUFPLEdBQUcsc0JBQU1DLGtCQUFOLEVBQWlCO0FBQ2hDTCxJQUFBQSxRQURnQztBQUVoQ1EsSUFBQUEsU0FBUyxFQUFFO0FBQ1ZZLE1BQUFBLE9BQU8sRUFBRTtBQURDO0FBRnFCLEdBQWpCLENBQWhCO0FBT0FkLEVBQUFBLE1BQU0sQ0FDTEYsT0FBTyxDQUNOVSxJQURELENBQ00sVUFETixFQUVDTyxPQUZELENBR0NDLEtBSEQsQ0FHTyxrQkFIUCxDQURLLENBQU4sQ0FLRUgsT0FMRixDQUtVLGNBTFY7QUFPQSxDQWZHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtb3VudCwgY3JlYXRlTG9jYWxWdWUgfSBmcm9tICdAdnVlL3Rlc3QtdXRpbHMnO1xuaW1wb3J0IEJvb3RzdHJhcFZ1ZSBmcm9tICdib290c3RyYXAtdnVlJztcbmltcG9ydCBBY3Rpb25CYXIgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvQWN0aW9uQmFyLnZ1ZSc7XG5cbmNvbnN0IGxvY2FsVnVlID0gY3JlYXRlTG9jYWxWdWUoKTtcbmxvY2FsVnVlLnVzZShCb290c3RyYXBWdWUpO1xuXG50ZXN0KCdDb21wb25lbnQgaXMgbW91bnRlZCBwcm9wZXJseScsICgpID0+IHtcblx0Y29uc3Qgd3JhcHBlciA9IG1vdW50KEFjdGlvbkJhciwge1xuXHRcdGxvY2FsVnVlLFxuXHR9KTtcblx0ZXhwZWN0KHdyYXBwZXIpLnRvTWF0Y2hTbmFwc2hvdCgpO1xufSk7XG5cbnRlc3QoJ2lmIHRoZSBkaXNtaXNzIGljb24gaXMgc2hvd24gd2hlbiB0aGUgcHJvcCBpc0Rpc21pc3NpYmxlIGlzIHNldHRlZCB0byB0cnVlJywgKCkgPT4ge1xuXHRjb25zdCB3cmFwcGVyID0gbW91bnQoQWN0aW9uQmFyLCB7XG5cdFx0bG9jYWxWdWUsXG5cdFx0cHJvcHNEYXRhOiB7XG5cdFx0XHRpc0Rpc21pc3NpYmxlOiB0cnVlLFxuXHRcdH0sXG5cdH0pO1xuXG5cdGV4cGVjdCh3cmFwcGVyLmZpbmRBbGwoJy5pY29uLWNvbnRhaW5lcicpLmxlbmd0aCkudG9CZSgxKTtcbn0pO1xuXG50ZXN0KFwiaWYgdGhlICdmaXhlZCcgY2xhc3MgaXMgdXNlZCB3aGVuIHRoZSBmbG9hdGluZ01vZGUgaXMgc2V0dGVkIHRvIHRydWVcIiwgKCkgPT4ge1xuXHRjb25zdCB3cmFwcGVyID0gbW91bnQoQWN0aW9uQmFyLCB7XG5cdFx0bG9jYWxWdWUsXG5cdFx0cHJvcHNEYXRhOiB7XG5cdFx0XHRmbG9hdGluZ01vZGU6IHRydWUsXG5cdFx0fSxcblx0fSk7XG5cblx0ZXhwZWN0KHdyYXBwZXIuZmluZEFsbCgnLmZpeGVkJykubGVuZ3RoKS50b0JlKDEpO1xufSk7XG5cbnRlc3QoJ2lmIHRoZSBldmVudCBpcyBlbWl0ZWQgY29ycmVjdGx5IHdoZW4gdGhlIGRpc21pc3NpYmxlIGljb24gaXMgY2xpY2tlZCcsICgpID0+IHtcblx0Y29uc3Qgd3JhcHBlciA9IG1vdW50KEFjdGlvbkJhciwge1xuXHRcdGxvY2FsVnVlLFxuXHRcdHByb3BzRGF0YToge1xuXHRcdFx0aXNEaXNtaXNzaWJsZTogdHJ1ZSxcblx0XHR9LFxuXHR9KTtcblxuXHR3cmFwcGVyLmZpbmQoJy5pY29uLWNvbnRhaW5lcicpLnRyaWdnZXIoJ2NsaWNrJyk7XG5cblx0ZXhwZWN0KHdyYXBwZXIuZW1pdHRlZCgpLmNsb3NlKS50b0JlVHJ1dGh5KCk7XG5cdGV4cGVjdCh3cmFwcGVyLmVtaXR0ZWQoKS5jbG9zZSkudG9FcXVhbChbIFsgdHJ1ZSBdIF0pO1xufSk7XG5cbnRlc3QoXCJpZiB0aGUgdGhlIGNvbG9yIHNlbnQgdG8gdGhlIHByb3AgJ2JnRGF0YScgaXMgYXBwbGllZFwiLCAoKSA9PiB7XG5cdGNvbnN0IHdyYXBwZXIgPSBtb3VudChBY3Rpb25CYXIsIHtcblx0XHRsb2NhbFZ1ZSxcblx0XHRwcm9wc0RhdGE6IHtcblx0XHRcdGJnQ29sb3I6ICdyZ2IoMCwgMCwgMCknLFxuXHRcdH0sXG5cdH0pO1xuXG5cdGV4cGVjdChcblx0XHR3cmFwcGVyXG5cdFx0LmZpbmQoJy50b29sYmFyJylcblx0XHQuZWxlbWVudFxuXHRcdC5zdHlsZVsnYmFja2dyb3VuZC1jb2xvciddKVxuXHRcdC50b0VxdWFsKCdyZ2IoMCwgMCwgMCknXG5cdCk7XG59KTtcbiJdfQ==