{"version":3,"sources":["ActionBar.spec.js"],"names":["localVue","use","BootstrapVue","test","wrapper","ActionBar","expect","toMatchSnapshot","propsData","isDismissible","findAll","length","toBe","floatingMode","find","trigger","emitted","close","toBeTruthy","toEqual","bgColor","element","style"],"mappings":";;;;AAAA;;AACA;;AACA;;AAEA,MAAMA,QAAQ,GAAG,gCAAjB;AACAA,QAAQ,CAACC,GAAT,CAAaC,qBAAb;AAEAC,IAAI,CAAC,+BAAD,EAAkC,MAAM;AAC3C,QAAMC,OAAO,GAAG,sBAAMC,kBAAN,EAAiB;AAChCL,IAAAA;AADgC,GAAjB,CAAhB;AAGAM,EAAAA,MAAM,CAACF,OAAD,CAAN,CAAgBG,eAAhB;AACA,CALG,CAAJ;AAOAJ,IAAI,CAAC,4EAAD,EAA+E,MAAM;AACxF,QAAMC,OAAO,GAAG,sBAAMC,kBAAN,EAAiB;AAChCL,IAAAA,QADgC;AAEhCQ,IAAAA,SAAS,EAAE;AACVC,MAAAA,aAAa,EAAE;AADL;AAFqB,GAAjB,CAAhB;AAOAH,EAAAA,MAAM,CAACF,OAAO,CAACM,OAAR,CAAgB,iBAAhB,EAAmCC,MAApC,CAAN,CAAkDC,IAAlD,CAAuD,CAAvD;AACA,CATG,CAAJ;AAWAT,IAAI,CAAC,sEAAD,EAAyE,MAAM;AAClF,QAAMC,OAAO,GAAG,sBAAMC,kBAAN,EAAiB;AAChCL,IAAAA,QADgC;AAEhCQ,IAAAA,SAAS,EAAE;AACVK,MAAAA,YAAY,EAAE;AADJ;AAFqB,GAAjB,CAAhB;AAOAP,EAAAA,MAAM,CAACF,OAAO,CAACM,OAAR,CAAgB,QAAhB,EAA0BC,MAA3B,CAAN,CAAyCC,IAAzC,CAA8C,CAA9C;AACA,CATG,CAAJ;AAWAT,IAAI,CAAC,uEAAD,EAA0E,MAAM;AACnF,QAAMC,OAAO,GAAG,sBAAMC,kBAAN,EAAiB;AAChCL,IAAAA,QADgC;AAEhCQ,IAAAA,SAAS,EAAE;AACVC,MAAAA,aAAa,EAAE;AADL;AAFqB,GAAjB,CAAhB;AAOAL,EAAAA,OAAO,CAACU,IAAR,CAAa,iBAAb,EAAgCC,OAAhC,CAAwC,OAAxC;AAEAT,EAAAA,MAAM,CAACF,OAAO,CAACY,OAAR,GAAkBC,KAAnB,CAAN,CAAgCC,UAAhC;AACAZ,EAAAA,MAAM,CAACF,OAAO,CAACY,OAAR,GAAkBC,KAAnB,CAAN,CAAgCE,OAAhC,CAAwC,CAAE,CAAE,IAAF,CAAF,CAAxC;AACA,CAZG,CAAJ;AAcAhB,IAAI,CAAC,uDAAD,EAA0D,MAAM;AACnE,QAAMC,OAAO,GAAG,sBAAMC,kBAAN,EAAiB;AAChCL,IAAAA,QADgC;AAEhCQ,IAAAA,SAAS,EAAE;AACVY,MAAAA,OAAO,EAAE;AADC;AAFqB,GAAjB,CAAhB;AAOAd,EAAAA,MAAM,CACLF,OAAO,CACNU,IADD,CACM,UADN,EAECO,OAFD,CAGCC,KAHD,CAGO,kBAHP,CADK,CAAN,CAKEH,OALF,CAKU,cALV;AAOA,CAfG,CAAJ","sourcesContent":["import { mount, createLocalVue } from '@vue/test-utils';\nimport BootstrapVue from 'bootstrap-vue';\nimport ActionBar from '../../src/components/ActionBar.vue';\n\nconst localVue = createLocalVue();\nlocalVue.use(BootstrapVue);\n\ntest('Component is mounted properly', () => {\n\tconst wrapper = mount(ActionBar, {\n\t\tlocalVue,\n\t});\n\texpect(wrapper).toMatchSnapshot();\n});\n\ntest('if the dismiss icon is shown when the prop isDismissible is setted to true', () => {\n\tconst wrapper = mount(ActionBar, {\n\t\tlocalVue,\n\t\tpropsData: {\n\t\t\tisDismissible: true,\n\t\t},\n\t});\n\n\texpect(wrapper.findAll('.icon-container').length).toBe(1);\n});\n\ntest(\"if the 'fixed' class is used when the floatingMode is setted to true\", () => {\n\tconst wrapper = mount(ActionBar, {\n\t\tlocalVue,\n\t\tpropsData: {\n\t\t\tfloatingMode: true,\n\t\t},\n\t});\n\n\texpect(wrapper.findAll('.fixed').length).toBe(1);\n});\n\ntest('if the event is emited correctly when the dismissible icon is clicked', () => {\n\tconst wrapper = mount(ActionBar, {\n\t\tlocalVue,\n\t\tpropsData: {\n\t\t\tisDismissible: true,\n\t\t},\n\t});\n\n\twrapper.find('.icon-container').trigger('click');\n\n\texpect(wrapper.emitted().close).toBeTruthy();\n\texpect(wrapper.emitted().close).toEqual([ [ true ] ]);\n});\n\ntest(\"if the the color sent to the prop 'bgData' is applied\", () => {\n\tconst wrapper = mount(ActionBar, {\n\t\tlocalVue,\n\t\tpropsData: {\n\t\t\tbgColor: 'rgb(0, 0, 0)',\n\t\t},\n\t});\n\n\texpect(\n\t\twrapper\n\t\t.find('.toolbar')\n\t\t.element\n\t\t.style['background-color'])\n\t\t.toEqual('rgb(0, 0, 0)'\n\t);\n});\n"]}