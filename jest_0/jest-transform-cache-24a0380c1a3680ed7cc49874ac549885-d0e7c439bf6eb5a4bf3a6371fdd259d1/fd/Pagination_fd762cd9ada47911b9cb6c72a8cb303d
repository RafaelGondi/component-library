1ac9021d4b1db403e4c7f7f57a9f6424
;(function(){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var _default = {
  props: {
    perPage: {
      type: Number,
      default: 5,
      description: `The maximum number of elements
				for each page of the element being paged.`
    },
    totalRows: {
      type: Number,
      default: 1,
      description: `The total amount of rows in the element
				being paged.`
    },
    activeBgColor: {
      type: String,
      default: '#545b62',
      description: `The Hex color code for the background
				of the active selection of the component.`
    },
    activeTextColor: {
      type: String,
      default: '#fff',
      description: `The Hex color code for the text
				of the active selection of the component.`
    },
    hoverBgColor: {
      type: String,
      default: '#545b62',
      description: `The Hex color code for the background
				of the hovered selection of the component.`
    },
    hoverTextColor: {
      type: String,
      default: '#fff',
      description: `The Hex color code for the text
				of the hovered selection of the component.`
    },
    borderRadius: {
      type: Number,
      default: 5,
      description: `The value, in pixels, of the border
				radius of the whole element.`
    }
  },

  data() {
    return {
      pressed: false,
      selectedIndex: 0,
      selectedValue: 1,
      pages: [],
      defaultIndex: 0,
      defaultValue: 1
    };
  },

  computed: {
    pageCount() {
      const perPage = this.perPage > 0 ? this.perPage : 1;
      return Math.ceil(this.totalRows / perPage);
    },

    cssVars() {
      return {
        '--active-bg-color': this.activeBgColor,
        '--active-text-color': this.activeTextColor,
        '--hover-bg-color': this.hoverBgColor,
        '--hover-text-color': this.hoverTextColor,
        '--border-radius': `${this.borderRadius}px`
      };
    }

  },
  watch: {
    totalRows() {
      this.pages = this.handlePages();
    },

    perPage() {
      this.pages = this.handlePages();
    }

  },

  beforeMount() {
    this.pages = this.handlePages();
    this.selectedIndex = this.defaultIndex;
    this.selectedValue = this.defaultValue;
  },

  methods: {
    handleClick(page) {
      if (page.value !== '...') {
        this.selectedValue = page.value;
        this.selectedIndex = page.index;
        this.pages = this.handlePages();
        this.pressed = true;
        this.$emit('input', page.index + 1);
      }
    },

    handlePages() {
      const pages = [];
      const pageNumber = this.pageCount < 15 ? this.pageCount : 15;

      for (let i = 0; i < pageNumber; i += 1) {
        pages[i] = {
          index: i,
          value: i + 1
        };

        if (pages[i].value === this.selectedValue) {
          this.selectedIndex = pages[i].index;
        }
      }

      if (this.pageCount > 15) {
        if (this.selectedValue > this.pageCount - 8) {
          for (let i = 0; i < 15; i += 1) {
            pages[i] = {
              index: i,
              value: this.pageCount - 14 + i
            };

            if (pages[i].value === this.selectedValue) {
              this.selectedIndex = pages[i].index;
            }
          }

          pages[1] = {
            index: 1,
            value: '...'
          };
        } else if (this.selectedValue <= 8) {
          pages[13] = {
            index: 13,
            value: '...'
          };
        } else {
          for (let i = 2; i < 7; i += 1) {
            pages[i] = {
              index: i,
              value: this.selectedValue - 7 + i
            };
          }

          for (let i = 8; i < 14; i += 1) {
            pages[i] = {
              index: i,
              value: this.selectedValue + i - 7
            };
          }

          this.selectedIndex = 7;
          pages[7] = {
            index: 7,
            value: this.selectedValue
          };
          pages[1] = {
            index: 1,
            value: '...'
          };
          pages[13] = {
            index: 13,
            value: '...'
          };
        }

        pages[0] = {
          index: 0,
          value: 1
        };
        pages[14] = {
          index: 14,
          value: this.pageCount
        };
      }

      return pages;
    }

  }
};
exports.default = _default;
})()
var defaultExport = (module.exports.__esModule) ? module.exports.default : module.exports;var __vue__options__ = (typeof defaultExport === "function"? defaultExport.options: defaultExport)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"pagination-container"},[_c('b-button-group',_vm._l((_vm.pages),function(page){return _c('b-button',{key:page.index,staticClass:"pagination-button",style:(_vm.cssVars),attrs:{"id":'tab'+page.index,"pressed":_vm.selectedIndex === page.index},on:{"click":function($event){return _vm.handleClick(page)}}},[_vm._v("\n\t\t\t"+_vm._s(page.value)+"\n\t\t")])}),1)],1)}
__vue__options__.staticRenderFns = []

//# sourceMappingURL=data:application/json;charset=utf-8;base64,